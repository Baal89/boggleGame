{"filter":false,"title":"test_boggle.py","tooltip":"/test_boggle.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["r"],"id":284},{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"insert","lines":["o"]},{"start":{"row":2,"column":3},"end":{"row":2,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":[" "],"id":285},{"start":{"row":2,"column":5},"end":{"row":2,"column":6},"action":"insert","lines":["s"]},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["t"]},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["e"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["i"]}],[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"remove","lines":["i"],"id":286},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"remove","lines":["e"]}],[{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["r"],"id":287},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["i"]},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["n"]},{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["g"]}],[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":[" "],"id":288},{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["i"]},{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["m"]},{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["p"]},{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["i"]}],[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"remove","lines":["i"],"id":289}],[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["o"],"id":290},{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"insert","lines":["r"]},{"start":{"row":2,"column":17},"end":{"row":2,"column":18},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":18},"end":{"row":2,"column":19},"action":"insert","lines":[" "],"id":291},{"start":{"row":2,"column":19},"end":{"row":2,"column":20},"action":"insert","lines":["a"]},{"start":{"row":2,"column":20},"end":{"row":2,"column":21},"action":"insert","lines":["s"]}],[{"start":{"row":2,"column":21},"end":{"row":2,"column":22},"action":"insert","lines":["c"],"id":292},{"start":{"row":2,"column":22},"end":{"row":2,"column":23},"action":"insert","lines":["i"]},{"start":{"row":2,"column":23},"end":{"row":2,"column":24},"action":"insert","lines":["i"]}],[{"start":{"row":2,"column":24},"end":{"row":2,"column":26},"action":"insert","lines":["()"],"id":293}],[{"start":{"row":2,"column":25},"end":{"row":2,"column":26},"action":"insert","lines":["u"],"id":294}],[{"start":{"row":2,"column":25},"end":{"row":2,"column":26},"action":"remove","lines":["u"],"id":295},{"start":{"row":2,"column":24},"end":{"row":2,"column":26},"action":"remove","lines":["()"]}],[{"start":{"row":2,"column":19},"end":{"row":2,"column":24},"action":"remove","lines":["ascii"],"id":296},{"start":{"row":2,"column":19},"end":{"row":2,"column":34},"action":"insert","lines":["ascii_uppercase"]}],[{"start":{"row":34,"column":38},"end":{"row":35,"column":0},"action":"insert","lines":["",""],"id":297},{"start":{"row":35,"column":0},"end":{"row":35,"column":8},"action":"insert","lines":["        "]},{"start":{"row":35,"column":8},"end":{"row":36,"column":0},"action":"insert","lines":["",""]},{"start":{"row":36,"column":0},"end":{"row":36,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":36,"column":4},"end":{"row":36,"column":8},"action":"remove","lines":["    "],"id":298}],[{"start":{"row":36,"column":4},"end":{"row":36,"column":5},"action":"insert","lines":["d"],"id":299},{"start":{"row":36,"column":5},"end":{"row":36,"column":6},"action":"insert","lines":["e"]},{"start":{"row":36,"column":6},"end":{"row":36,"column":7},"action":"insert","lines":["f"]}],[{"start":{"row":36,"column":7},"end":{"row":36,"column":8},"action":"insert","lines":[" "],"id":300}],[{"start":{"row":36,"column":8},"end":{"row":36,"column":9},"action":"insert","lines":["t"],"id":301},{"start":{"row":36,"column":9},"end":{"row":36,"column":10},"action":"insert","lines":["e"]},{"start":{"row":36,"column":10},"end":{"row":36,"column":11},"action":"insert","lines":["s"]},{"start":{"row":36,"column":11},"end":{"row":36,"column":12},"action":"insert","lines":["t"]},{"start":{"row":36,"column":12},"end":{"row":36,"column":13},"action":"insert","lines":["_"]}],[{"start":{"row":36,"column":13},"end":{"row":36,"column":14},"action":"insert","lines":["g"],"id":302},{"start":{"row":36,"column":14},"end":{"row":36,"column":15},"action":"insert","lines":["r"]},{"start":{"row":36,"column":15},"end":{"row":36,"column":16},"action":"insert","lines":["i"]},{"start":{"row":36,"column":16},"end":{"row":36,"column":17},"action":"insert","lines":["d"]},{"start":{"row":36,"column":17},"end":{"row":36,"column":18},"action":"insert","lines":["_"]}],[{"start":{"row":36,"column":18},"end":{"row":36,"column":19},"action":"insert","lines":["i"],"id":303},{"start":{"row":36,"column":19},"end":{"row":36,"column":20},"action":"insert","lines":["s"]},{"start":{"row":36,"column":20},"end":{"row":36,"column":21},"action":"insert","lines":["_"]}],[{"start":{"row":36,"column":21},"end":{"row":36,"column":22},"action":"insert","lines":["f"],"id":304},{"start":{"row":36,"column":22},"end":{"row":36,"column":23},"action":"insert","lines":["i"]},{"start":{"row":36,"column":23},"end":{"row":36,"column":24},"action":"insert","lines":["l"]},{"start":{"row":36,"column":24},"end":{"row":36,"column":25},"action":"insert","lines":["l"]},{"start":{"row":36,"column":25},"end":{"row":36,"column":26},"action":"insert","lines":["e"]},{"start":{"row":36,"column":26},"end":{"row":36,"column":27},"action":"insert","lines":["d"]}],[{"start":{"row":36,"column":27},"end":{"row":36,"column":28},"action":"insert","lines":["_"],"id":305},{"start":{"row":36,"column":28},"end":{"row":36,"column":29},"action":"insert","lines":["w"]},{"start":{"row":36,"column":29},"end":{"row":36,"column":30},"action":"insert","lines":["i"]}],[{"start":{"row":36,"column":30},"end":{"row":36,"column":31},"action":"insert","lines":["t"],"id":306},{"start":{"row":36,"column":31},"end":{"row":36,"column":32},"action":"insert","lines":["h"]},{"start":{"row":36,"column":32},"end":{"row":36,"column":33},"action":"insert","lines":["_"]}],[{"start":{"row":36,"column":33},"end":{"row":36,"column":34},"action":"insert","lines":["l"],"id":307},{"start":{"row":36,"column":34},"end":{"row":36,"column":35},"action":"insert","lines":["e"]},{"start":{"row":36,"column":35},"end":{"row":36,"column":36},"action":"insert","lines":["t"]},{"start":{"row":36,"column":36},"end":{"row":36,"column":37},"action":"insert","lines":["t"]},{"start":{"row":36,"column":37},"end":{"row":36,"column":38},"action":"insert","lines":["e"]},{"start":{"row":36,"column":38},"end":{"row":36,"column":39},"action":"insert","lines":["r"]},{"start":{"row":36,"column":39},"end":{"row":36,"column":40},"action":"insert","lines":["s"]}],[{"start":{"row":36,"column":40},"end":{"row":36,"column":41},"action":"insert","lines":[")"],"id":308}],[{"start":{"row":36,"column":40},"end":{"row":36,"column":41},"action":"remove","lines":[")"],"id":309}],[{"start":{"row":36,"column":40},"end":{"row":36,"column":42},"action":"insert","lines":["()"],"id":310}],[{"start":{"row":36,"column":41},"end":{"row":36,"column":42},"action":"insert","lines":["s"],"id":311},{"start":{"row":36,"column":42},"end":{"row":36,"column":43},"action":"insert","lines":["e"]},{"start":{"row":36,"column":43},"end":{"row":36,"column":44},"action":"insert","lines":["l"]},{"start":{"row":36,"column":44},"end":{"row":36,"column":45},"action":"insert","lines":["f"]}],[{"start":{"row":36,"column":46},"end":{"row":36,"column":47},"action":"insert","lines":[":"],"id":312}],[{"start":{"row":36,"column":47},"end":{"row":37,"column":0},"action":"insert","lines":["",""],"id":313},{"start":{"row":37,"column":0},"end":{"row":37,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":37,"column":8},"end":{"row":37,"column":10},"action":"insert","lines":["\"\""],"id":314}],[{"start":{"row":37,"column":10},"end":{"row":37,"column":11},"action":"insert","lines":["\""],"id":315}],[{"start":{"row":37,"column":11},"end":{"row":38,"column":0},"action":"insert","lines":["",""],"id":316},{"start":{"row":38,"column":0},"end":{"row":38,"column":8},"action":"insert","lines":["        "]},{"start":{"row":38,"column":8},"end":{"row":38,"column":9},"action":"insert","lines":["e"]},{"start":{"row":38,"column":9},"end":{"row":38,"column":10},"action":"insert","lines":["s"]}],[{"start":{"row":38,"column":10},"end":{"row":38,"column":11},"action":"insert","lines":["u"],"id":317}],[{"start":{"row":38,"column":10},"end":{"row":38,"column":11},"action":"remove","lines":["u"],"id":318},{"start":{"row":38,"column":9},"end":{"row":38,"column":10},"action":"remove","lines":["s"]}],[{"start":{"row":38,"column":9},"end":{"row":38,"column":10},"action":"insert","lines":["n"],"id":319},{"start":{"row":38,"column":10},"end":{"row":38,"column":11},"action":"insert","lines":["s"]},{"start":{"row":38,"column":11},"end":{"row":38,"column":12},"action":"insert","lines":["u"]},{"start":{"row":38,"column":12},"end":{"row":38,"column":13},"action":"insert","lines":["r"]},{"start":{"row":38,"column":13},"end":{"row":38,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":38,"column":14},"end":{"row":38,"column":15},"action":"insert","lines":[" "],"id":320},{"start":{"row":38,"column":15},"end":{"row":38,"column":16},"action":"insert","lines":["t"]},{"start":{"row":38,"column":16},"end":{"row":38,"column":17},"action":"insert","lines":["h"]},{"start":{"row":38,"column":17},"end":{"row":38,"column":18},"action":"insert","lines":["a"]},{"start":{"row":38,"column":18},"end":{"row":38,"column":19},"action":"insert","lines":["t"]}],[{"start":{"row":38,"column":19},"end":{"row":38,"column":20},"action":"insert","lines":[" "],"id":321},{"start":{"row":38,"column":20},"end":{"row":38,"column":21},"action":"insert","lines":["e"]},{"start":{"row":38,"column":21},"end":{"row":38,"column":22},"action":"insert","lines":["a"]},{"start":{"row":38,"column":22},"end":{"row":38,"column":23},"action":"insert","lines":["c"]},{"start":{"row":38,"column":23},"end":{"row":38,"column":24},"action":"insert","lines":["k"]}],[{"start":{"row":38,"column":24},"end":{"row":38,"column":25},"action":"insert","lines":[" "],"id":322}],[{"start":{"row":38,"column":24},"end":{"row":38,"column":25},"action":"remove","lines":[" "],"id":323},{"start":{"row":38,"column":23},"end":{"row":38,"column":24},"action":"remove","lines":["k"]}],[{"start":{"row":38,"column":23},"end":{"row":38,"column":24},"action":"insert","lines":["h"],"id":324}],[{"start":{"row":38,"column":24},"end":{"row":38,"column":25},"action":"insert","lines":[" "],"id":325},{"start":{"row":38,"column":25},"end":{"row":38,"column":26},"action":"insert","lines":["o"]},{"start":{"row":38,"column":26},"end":{"row":38,"column":27},"action":"insert","lines":["f"]}],[{"start":{"row":38,"column":27},"end":{"row":38,"column":28},"action":"insert","lines":[" "],"id":326},{"start":{"row":38,"column":28},"end":{"row":38,"column":29},"action":"insert","lines":["t"]},{"start":{"row":38,"column":29},"end":{"row":38,"column":30},"action":"insert","lines":["h"]},{"start":{"row":38,"column":30},"end":{"row":38,"column":31},"action":"insert","lines":["e"]}],[{"start":{"row":38,"column":31},"end":{"row":38,"column":32},"action":"insert","lines":[" "],"id":327},{"start":{"row":38,"column":32},"end":{"row":38,"column":33},"action":"insert","lines":["c"]},{"start":{"row":38,"column":33},"end":{"row":38,"column":34},"action":"insert","lines":["o"]},{"start":{"row":38,"column":34},"end":{"row":38,"column":35},"action":"insert","lines":["o"]},{"start":{"row":38,"column":35},"end":{"row":38,"column":36},"action":"insert","lines":["r"]},{"start":{"row":38,"column":36},"end":{"row":38,"column":37},"action":"insert","lines":["d"]},{"start":{"row":38,"column":37},"end":{"row":38,"column":38},"action":"insert","lines":["i"]},{"start":{"row":38,"column":38},"end":{"row":38,"column":39},"action":"insert","lines":["n"]},{"start":{"row":38,"column":39},"end":{"row":38,"column":40},"action":"insert","lines":["a"]},{"start":{"row":38,"column":40},"end":{"row":38,"column":41},"action":"insert","lines":["t"]}],[{"start":{"row":38,"column":41},"end":{"row":38,"column":42},"action":"insert","lines":["e"],"id":328},{"start":{"row":38,"column":42},"end":{"row":38,"column":43},"action":"insert","lines":["s"]}],[{"start":{"row":38,"column":43},"end":{"row":38,"column":44},"action":"insert","lines":[" "],"id":329},{"start":{"row":38,"column":44},"end":{"row":38,"column":45},"action":"insert","lines":["o"]},{"start":{"row":38,"column":45},"end":{"row":38,"column":46},"action":"insert","lines":["f"]}],[{"start":{"row":38,"column":46},"end":{"row":38,"column":47},"action":"insert","lines":[" "],"id":330},{"start":{"row":38,"column":47},"end":{"row":38,"column":48},"action":"insert","lines":["t"]},{"start":{"row":38,"column":48},"end":{"row":38,"column":49},"action":"insert","lines":["h"]},{"start":{"row":38,"column":49},"end":{"row":38,"column":50},"action":"insert","lines":["e"]}],[{"start":{"row":38,"column":50},"end":{"row":38,"column":51},"action":"insert","lines":[" "],"id":331},{"start":{"row":38,"column":51},"end":{"row":38,"column":52},"action":"insert","lines":["g"]},{"start":{"row":38,"column":52},"end":{"row":38,"column":53},"action":"insert","lines":["r"]},{"start":{"row":38,"column":53},"end":{"row":38,"column":54},"action":"insert","lines":["i"]},{"start":{"row":38,"column":54},"end":{"row":38,"column":55},"action":"insert","lines":["d"]}],[{"start":{"row":38,"column":55},"end":{"row":39,"column":0},"action":"insert","lines":["",""],"id":332},{"start":{"row":39,"column":0},"end":{"row":39,"column":8},"action":"insert","lines":["        "]},{"start":{"row":39,"column":8},"end":{"row":39,"column":9},"action":"insert","lines":["c"]},{"start":{"row":39,"column":9},"end":{"row":39,"column":10},"action":"insert","lines":["c"]},{"start":{"row":39,"column":10},"end":{"row":39,"column":11},"action":"insert","lines":["o"]}],[{"start":{"row":39,"column":10},"end":{"row":39,"column":11},"action":"remove","lines":["o"],"id":333},{"start":{"row":39,"column":9},"end":{"row":39,"column":10},"action":"remove","lines":["c"]}],[{"start":{"row":39,"column":9},"end":{"row":39,"column":10},"action":"insert","lines":["o"],"id":334},{"start":{"row":39,"column":10},"end":{"row":39,"column":11},"action":"insert","lines":["n"]},{"start":{"row":39,"column":11},"end":{"row":39,"column":12},"action":"insert","lines":["t"]},{"start":{"row":39,"column":12},"end":{"row":39,"column":13},"action":"insert","lines":["a"]},{"start":{"row":39,"column":13},"end":{"row":39,"column":14},"action":"insert","lines":["i"]},{"start":{"row":39,"column":14},"end":{"row":39,"column":15},"action":"insert","lines":["n"]},{"start":{"row":39,"column":15},"end":{"row":39,"column":16},"action":"insert","lines":["s"]}],[{"start":{"row":39,"column":15},"end":{"row":39,"column":16},"action":"remove","lines":["s"],"id":335}],[{"start":{"row":39,"column":15},"end":{"row":39,"column":16},"action":"insert","lines":["s"],"id":336}],[{"start":{"row":39,"column":16},"end":{"row":39,"column":17},"action":"insert","lines":[" "],"id":337},{"start":{"row":39,"column":17},"end":{"row":39,"column":18},"action":"insert","lines":["l"]},{"start":{"row":39,"column":18},"end":{"row":39,"column":19},"action":"insert","lines":["e"]},{"start":{"row":39,"column":19},"end":{"row":39,"column":20},"action":"insert","lines":["t"]},{"start":{"row":39,"column":20},"end":{"row":39,"column":21},"action":"insert","lines":["t"]},{"start":{"row":39,"column":21},"end":{"row":39,"column":22},"action":"insert","lines":["e"]},{"start":{"row":39,"column":22},"end":{"row":39,"column":23},"action":"insert","lines":["r"]},{"start":{"row":39,"column":23},"end":{"row":39,"column":24},"action":"insert","lines":["s"]}],[{"start":{"row":39,"column":24},"end":{"row":40,"column":0},"action":"insert","lines":["",""],"id":338},{"start":{"row":40,"column":0},"end":{"row":40,"column":8},"action":"insert","lines":["        "]},{"start":{"row":40,"column":8},"end":{"row":40,"column":9},"action":"insert","lines":["\""]},{"start":{"row":40,"column":9},"end":{"row":40,"column":10},"action":"insert","lines":["\""]},{"start":{"row":40,"column":10},"end":{"row":40,"column":11},"action":"insert","lines":["\""]}],[{"start":{"row":40,"column":11},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":339},{"start":{"row":41,"column":0},"end":{"row":41,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"insert","lines":["g"],"id":340},{"start":{"row":41,"column":9},"end":{"row":41,"column":10},"action":"insert","lines":["r"]},{"start":{"row":41,"column":10},"end":{"row":41,"column":11},"action":"insert","lines":["i"]},{"start":{"row":41,"column":11},"end":{"row":41,"column":12},"action":"insert","lines":["d"]}],[{"start":{"row":41,"column":12},"end":{"row":41,"column":13},"action":"insert","lines":[" "],"id":341},{"start":{"row":41,"column":13},"end":{"row":41,"column":14},"action":"insert","lines":["-"]}],[{"start":{"row":41,"column":13},"end":{"row":41,"column":14},"action":"remove","lines":["-"],"id":342}],[{"start":{"row":41,"column":13},"end":{"row":41,"column":14},"action":"insert","lines":["="],"id":343}],[{"start":{"row":41,"column":14},"end":{"row":41,"column":15},"action":"insert","lines":[" "],"id":344},{"start":{"row":41,"column":15},"end":{"row":41,"column":16},"action":"insert","lines":["b"]},{"start":{"row":41,"column":16},"end":{"row":41,"column":17},"action":"insert","lines":["o"]},{"start":{"row":41,"column":17},"end":{"row":41,"column":18},"action":"insert","lines":["g"]},{"start":{"row":41,"column":18},"end":{"row":41,"column":19},"action":"insert","lines":["g"]},{"start":{"row":41,"column":19},"end":{"row":41,"column":20},"action":"insert","lines":["l"]},{"start":{"row":41,"column":20},"end":{"row":41,"column":21},"action":"insert","lines":["e"]}],[{"start":{"row":41,"column":21},"end":{"row":41,"column":22},"action":"insert","lines":["."],"id":345},{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"insert","lines":["m"]},{"start":{"row":41,"column":23},"end":{"row":41,"column":24},"action":"insert","lines":["a"]},{"start":{"row":41,"column":24},"end":{"row":41,"column":25},"action":"insert","lines":["k"]},{"start":{"row":41,"column":25},"end":{"row":41,"column":26},"action":"insert","lines":["e"]},{"start":{"row":41,"column":26},"end":{"row":41,"column":27},"action":"insert","lines":["_"]}],[{"start":{"row":41,"column":27},"end":{"row":41,"column":28},"action":"insert","lines":["g"],"id":346},{"start":{"row":41,"column":28},"end":{"row":41,"column":29},"action":"insert","lines":["r"]},{"start":{"row":41,"column":29},"end":{"row":41,"column":30},"action":"insert","lines":["i"]},{"start":{"row":41,"column":30},"end":{"row":41,"column":31},"action":"insert","lines":["d"]}],[{"start":{"row":41,"column":31},"end":{"row":41,"column":33},"action":"insert","lines":["()"],"id":347}],[{"start":{"row":41,"column":32},"end":{"row":41,"column":33},"action":"insert","lines":["2"],"id":348},{"start":{"row":41,"column":33},"end":{"row":41,"column":34},"action":"insert","lines":[","]}],[{"start":{"row":41,"column":34},"end":{"row":41,"column":35},"action":"insert","lines":["3"],"id":349}],[{"start":{"row":41,"column":34},"end":{"row":41,"column":35},"action":"insert","lines":[" "],"id":350}],[{"start":{"row":41,"column":37},"end":{"row":42,"column":0},"action":"insert","lines":["",""],"id":351},{"start":{"row":42,"column":0},"end":{"row":42,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":42,"column":8},"end":{"row":42,"column":9},"action":"insert","lines":["f"],"id":352},{"start":{"row":42,"column":9},"end":{"row":42,"column":10},"action":"insert","lines":["o"]},{"start":{"row":42,"column":10},"end":{"row":42,"column":11},"action":"insert","lines":["r"]}],[{"start":{"row":42,"column":11},"end":{"row":42,"column":12},"action":"insert","lines":[" "],"id":353},{"start":{"row":42,"column":12},"end":{"row":42,"column":13},"action":"insert","lines":["l"]},{"start":{"row":42,"column":13},"end":{"row":42,"column":14},"action":"insert","lines":["e"]},{"start":{"row":42,"column":14},"end":{"row":42,"column":15},"action":"insert","lines":["t"]},{"start":{"row":42,"column":15},"end":{"row":42,"column":16},"action":"insert","lines":["t"]},{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"insert","lines":["e"]},{"start":{"row":42,"column":17},"end":{"row":42,"column":18},"action":"insert","lines":["r"]},{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"insert","lines":["s"]}],[{"start":{"row":42,"column":19},"end":{"row":42,"column":20},"action":"insert","lines":[" "],"id":354},{"start":{"row":42,"column":20},"end":{"row":42,"column":21},"action":"insert","lines":["i"]},{"start":{"row":42,"column":21},"end":{"row":42,"column":22},"action":"insert","lines":["n"]}],[{"start":{"row":42,"column":22},"end":{"row":42,"column":23},"action":"insert","lines":[" "],"id":355},{"start":{"row":42,"column":23},"end":{"row":42,"column":24},"action":"insert","lines":["g"]},{"start":{"row":42,"column":24},"end":{"row":42,"column":25},"action":"insert","lines":["r"]},{"start":{"row":42,"column":25},"end":{"row":42,"column":26},"action":"insert","lines":["i"]},{"start":{"row":42,"column":26},"end":{"row":42,"column":27},"action":"insert","lines":["d"]},{"start":{"row":42,"column":27},"end":{"row":42,"column":28},"action":"insert","lines":[","]}],[{"start":{"row":42,"column":27},"end":{"row":42,"column":28},"action":"remove","lines":[","],"id":356}],[{"start":{"row":42,"column":27},"end":{"row":42,"column":28},"action":"insert","lines":["."],"id":357},{"start":{"row":42,"column":28},"end":{"row":42,"column":29},"action":"insert","lines":["v"]},{"start":{"row":42,"column":29},"end":{"row":42,"column":30},"action":"insert","lines":["a"]},{"start":{"row":42,"column":30},"end":{"row":42,"column":31},"action":"insert","lines":["l"]}],[{"start":{"row":42,"column":31},"end":{"row":42,"column":32},"action":"insert","lines":["u"],"id":358},{"start":{"row":42,"column":32},"end":{"row":42,"column":33},"action":"insert","lines":["e"]},{"start":{"row":42,"column":33},"end":{"row":42,"column":34},"action":"insert","lines":["s"]}],[{"start":{"row":42,"column":34},"end":{"row":42,"column":36},"action":"insert","lines":["()"],"id":359}],[{"start":{"row":42,"column":36},"end":{"row":42,"column":37},"action":"insert","lines":[":"],"id":360}],[{"start":{"row":42,"column":37},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":361},{"start":{"row":43,"column":0},"end":{"row":43,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":43,"column":12},"end":{"row":43,"column":13},"action":"insert","lines":["s"],"id":362},{"start":{"row":43,"column":13},"end":{"row":43,"column":14},"action":"insert","lines":["e"]},{"start":{"row":43,"column":14},"end":{"row":43,"column":15},"action":"insert","lines":["l"]},{"start":{"row":43,"column":15},"end":{"row":43,"column":16},"action":"insert","lines":["d"]}],[{"start":{"row":43,"column":15},"end":{"row":43,"column":16},"action":"remove","lines":["d"],"id":363}],[{"start":{"row":43,"column":15},"end":{"row":43,"column":16},"action":"insert","lines":["f"],"id":364},{"start":{"row":43,"column":16},"end":{"row":43,"column":17},"action":"insert","lines":["."]},{"start":{"row":43,"column":17},"end":{"row":43,"column":18},"action":"insert","lines":["a"]}],[{"start":{"row":43,"column":18},"end":{"row":43,"column":19},"action":"insert","lines":["s"],"id":365},{"start":{"row":43,"column":19},"end":{"row":43,"column":20},"action":"insert","lines":["s"]},{"start":{"row":43,"column":20},"end":{"row":43,"column":21},"action":"insert","lines":["e"]},{"start":{"row":43,"column":21},"end":{"row":43,"column":22},"action":"insert","lines":["r"]},{"start":{"row":43,"column":22},"end":{"row":43,"column":23},"action":"insert","lines":["t"]}],[{"start":{"row":43,"column":23},"end":{"row":43,"column":24},"action":"insert","lines":["I"],"id":366},{"start":{"row":43,"column":24},"end":{"row":43,"column":25},"action":"insert","lines":["n"]}],[{"start":{"row":43,"column":25},"end":{"row":43,"column":27},"action":"insert","lines":["()"],"id":367}],[{"start":{"row":43,"column":26},"end":{"row":43,"column":28},"action":"insert","lines":["()"],"id":368}],[{"start":{"row":43,"column":26},"end":{"row":43,"column":28},"action":"remove","lines":["()"],"id":369}],[{"start":{"row":43,"column":26},"end":{"row":43,"column":27},"action":"insert","lines":["l"],"id":370},{"start":{"row":43,"column":27},"end":{"row":43,"column":28},"action":"insert","lines":["e"]},{"start":{"row":43,"column":28},"end":{"row":43,"column":29},"action":"insert","lines":["t"]},{"start":{"row":43,"column":29},"end":{"row":43,"column":30},"action":"insert","lines":["t"]},{"start":{"row":43,"column":30},"end":{"row":43,"column":31},"action":"insert","lines":["e"]}],[{"start":{"row":43,"column":31},"end":{"row":43,"column":32},"action":"insert","lines":["r"],"id":371},{"start":{"row":43,"column":32},"end":{"row":43,"column":33},"action":"insert","lines":["s"]},{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"insert","lines":[","]}],[{"start":{"row":43,"column":34},"end":{"row":43,"column":35},"action":"insert","lines":[" "],"id":372},{"start":{"row":43,"column":35},"end":{"row":43,"column":36},"action":"insert","lines":["a"]},{"start":{"row":43,"column":36},"end":{"row":43,"column":37},"action":"insert","lines":["s"]}],[{"start":{"row":43,"column":37},"end":{"row":43,"column":38},"action":"insert","lines":["s"],"id":373}],[{"start":{"row":43,"column":37},"end":{"row":43,"column":38},"action":"remove","lines":["s"],"id":374}],[{"start":{"row":43,"column":35},"end":{"row":43,"column":37},"action":"remove","lines":["as"],"id":375},{"start":{"row":43,"column":35},"end":{"row":43,"column":50},"action":"insert","lines":["ascii_uppercase"]}],[{"start":{"row":21,"column":38},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":376},{"start":{"row":22,"column":0},"end":{"row":22,"column":8},"action":"insert","lines":["        "]},{"start":{"row":22,"column":8},"end":{"row":23,"column":0},"action":"insert","lines":["",""]},{"start":{"row":23,"column":0},"end":{"row":23,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":23,"column":4},"end":{"row":23,"column":8},"action":"remove","lines":["    "],"id":377}],[{"start":{"row":23,"column":4},"end":{"row":45,"column":41},"action":"insert","lines":["def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)"],"id":378}],[{"start":{"row":1,"column":13},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":379}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from string import ascii_uppercase",""],"id":380}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":41},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    our test suit for Boggle solver","    \"\"\"","    ","    def test_can_create_an_empty_grif(self):","        \"\"\"","        test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0,0)","        self.assertEqual(len(grid), 0)","        ","    def test_grid_size_is_width_times_height(self):","        \"\"\"","        test is to ensure that total size of the grid is","        equal to width * height","        \"\"\"","        grid = boggle.make_grid(2,3)","        self.assertEqual(len(grid), 6)","        ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)"],"id":381},{"start":{"row":0,"column":0},"end":{"row":103,"column":4},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)","    "]}],[{"start":{"row":93,"column":33},"end":{"row":93,"column":34},"action":"insert","lines":["a"],"id":382}],[{"start":{"row":0,"column":0},"end":{"row":103,"column":4},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLettaerWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)","    "],"id":383},{"start":{"row":0,"column":0},"end":{"row":103,"column":4},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)","    "]}],[{"start":{"row":0,"column":0},"end":{"row":103,"column":4},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)","    "],"id":384},{"start":{"row":0,"column":0},"end":{"row":106,"column":4},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        ","        fullwords = [twoLetterWord, threeLetterWord, notThereWord]","        stems = ['A', 'AB', 'E', 'EE']","        dictionary = fullwords, stems","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)","    "]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":31},"end":{"row":12,"column":31},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":19812,"mode":"ace/mode/python"}},"timestamp":1571432307572,"hash":"352872e4c82e6369a63fb42e10f91c18b3eb5865"}