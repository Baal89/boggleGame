{"filter":false,"title":"boggle.py","tooltip":"/boggle.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":5,"column":12},"end":{"row":5,"column":13},"action":"insert","lines":["s"],"id":49},{"start":{"row":5,"column":13},"end":{"row":5,"column":14},"action":"insert","lines":["o"]},{"start":{"row":5,"column":14},"end":{"row":5,"column":15},"action":"insert","lines":["l"]}],[{"start":{"row":5,"column":14},"end":{"row":5,"column":15},"action":"remove","lines":["l"],"id":50},{"start":{"row":5,"column":13},"end":{"row":5,"column":14},"action":"remove","lines":["o"]},{"start":{"row":5,"column":12},"end":{"row":5,"column":13},"action":"remove","lines":["s"]}],[{"start":{"row":5,"column":12},"end":{"row":5,"column":13},"action":"insert","lines":["c"],"id":51},{"start":{"row":5,"column":13},"end":{"row":5,"column":14},"action":"insert","lines":["o"]},{"start":{"row":5,"column":14},"end":{"row":5,"column":15},"action":"insert","lines":["l"]}],[{"start":{"row":5,"column":15},"end":{"row":5,"column":16},"action":"insert","lines":[" "],"id":52},{"start":{"row":5,"column":16},"end":{"row":5,"column":17},"action":"insert","lines":["i"]},{"start":{"row":5,"column":17},"end":{"row":5,"column":18},"action":"insert","lines":["n"]}],[{"start":{"row":5,"column":18},"end":{"row":5,"column":19},"action":"insert","lines":[" "],"id":53},{"start":{"row":5,"column":19},"end":{"row":5,"column":20},"action":"insert","lines":["r"]},{"start":{"row":5,"column":20},"end":{"row":5,"column":21},"action":"insert","lines":["a"]},{"start":{"row":5,"column":21},"end":{"row":5,"column":22},"action":"insert","lines":["n"]},{"start":{"row":5,"column":22},"end":{"row":5,"column":23},"action":"insert","lines":["g"]},{"start":{"row":5,"column":23},"end":{"row":5,"column":24},"action":"insert","lines":["e"]}],[{"start":{"row":5,"column":24},"end":{"row":5,"column":26},"action":"insert","lines":["()"],"id":54}],[{"start":{"row":5,"column":25},"end":{"row":5,"column":26},"action":"insert","lines":["w"],"id":55},{"start":{"row":5,"column":26},"end":{"row":5,"column":27},"action":"insert","lines":["i"]},{"start":{"row":5,"column":27},"end":{"row":5,"column":28},"action":"insert","lines":["g"]},{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"insert","lines":["h"]},{"start":{"row":5,"column":29},"end":{"row":5,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":5,"column":29},"end":{"row":5,"column":30},"action":"remove","lines":["t"],"id":56},{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"remove","lines":["h"]},{"start":{"row":5,"column":27},"end":{"row":5,"column":28},"action":"remove","lines":["g"]}],[{"start":{"row":5,"column":27},"end":{"row":5,"column":28},"action":"insert","lines":["d"],"id":57},{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"insert","lines":["t"]},{"start":{"row":5,"column":29},"end":{"row":5,"column":30},"action":"insert","lines":["h"]}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":4},"action":"remove","lines":["    "],"id":58},{"start":{"row":5,"column":31},"end":{"row":6,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":4,"column":25},"end":{"row":4,"column":26},"action":"remove","lines":["\""],"id":59},{"start":{"row":4,"column":24},"end":{"row":4,"column":25},"action":"remove","lines":["\""]}],[{"start":{"row":4,"column":24},"end":{"row":4,"column":25},"action":"insert","lines":["c"],"id":60},{"start":{"row":4,"column":25},"end":{"row":4,"column":26},"action":"insert","lines":["h"]},{"start":{"row":4,"column":26},"end":{"row":4,"column":27},"action":"insert","lines":["o"]},{"start":{"row":4,"column":27},"end":{"row":4,"column":28},"action":"insert","lines":["i"]},{"start":{"row":4,"column":28},"end":{"row":4,"column":29},"action":"insert","lines":["c"]},{"start":{"row":4,"column":29},"end":{"row":4,"column":30},"action":"insert","lines":["e"]}],[{"start":{"row":4,"column":30},"end":{"row":4,"column":32},"action":"insert","lines":["()"],"id":61}],[{"start":{"row":4,"column":31},"end":{"row":4,"column":32},"action":"insert","lines":["a"],"id":62},{"start":{"row":4,"column":32},"end":{"row":4,"column":33},"action":"insert","lines":["s"]}],[{"start":{"row":4,"column":33},"end":{"row":4,"column":34},"action":"insert","lines":["c"],"id":63},{"start":{"row":4,"column":34},"end":{"row":4,"column":35},"action":"insert","lines":["i"]},{"start":{"row":4,"column":35},"end":{"row":4,"column":36},"action":"insert","lines":["i"]}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":38},"action":"insert","lines":["()"],"id":64}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":38},"action":"remove","lines":["()"],"id":65}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":37},"action":"insert","lines":[")"],"id":66}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":37},"action":"remove","lines":[")"],"id":67}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":37},"action":"insert","lines":["_"],"id":68}],[{"start":{"row":4,"column":31},"end":{"row":4,"column":37},"action":"remove","lines":["ascii_"],"id":69},{"start":{"row":4,"column":31},"end":{"row":4,"column":46},"action":"insert","lines":["ascii_uppercase"]}],[{"start":{"row":4,"column":47},"end":{"row":4,"column":48},"action":"remove","lines":[" "],"id":70},{"start":{"row":4,"column":47},"end":{"row":5,"column":0},"action":"insert","lines":["",""]},{"start":{"row":5,"column":0},"end":{"row":5,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":5,"column":4},"end":{"row":5,"column":5},"action":"insert","lines":[" "],"id":71}],[{"start":{"row":5,"column":5},"end":{"row":5,"column":6},"action":"insert","lines":[" "],"id":72}],[{"start":{"row":5,"column":5},"end":{"row":5,"column":6},"action":"remove","lines":[" "],"id":73},{"start":{"row":5,"column":4},"end":{"row":5,"column":5},"action":"remove","lines":[" "]}],[{"start":{"row":5,"column":4},"end":{"row":5,"column":8},"action":"insert","lines":["    "],"id":74}],[{"start":{"row":5,"column":8},"end":{"row":5,"column":12},"action":"insert","lines":["    "],"id":75}],[{"start":{"row":5,"column":8},"end":{"row":5,"column":12},"action":"remove","lines":["    "],"id":76}],[{"start":{"row":2,"column":5},"end":{"row":2,"column":29},"action":"remove","lines":["ake an empty boggle grid"],"id":77},{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"remove","lines":["m"]}],[{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":["C"],"id":78},{"start":{"row":2,"column":5},"end":{"row":2,"column":6},"action":"insert","lines":["r"]},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["e"]},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["a"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["t"]},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["e"]}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":[" "],"id":79},{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["a"]},{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["n"]}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":[" "],"id":80},{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["e"]},{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["m"]}],[{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"insert","lines":["p"],"id":81},{"start":{"row":2,"column":17},"end":{"row":2,"column":18},"action":"insert","lines":["t"]},{"start":{"row":2,"column":18},"end":{"row":2,"column":19},"action":"insert","lines":["y"]}],[{"start":{"row":2,"column":19},"end":{"row":2,"column":20},"action":"insert","lines":[" "],"id":82},{"start":{"row":2,"column":20},"end":{"row":2,"column":21},"action":"insert","lines":["g"]},{"start":{"row":2,"column":21},"end":{"row":2,"column":22},"action":"insert","lines":["r"]},{"start":{"row":2,"column":22},"end":{"row":2,"column":23},"action":"insert","lines":["i"]},{"start":{"row":2,"column":23},"end":{"row":2,"column":24},"action":"insert","lines":["d"]}],[{"start":{"row":2,"column":24},"end":{"row":2,"column":25},"action":"insert","lines":[" "],"id":83},{"start":{"row":2,"column":25},"end":{"row":2,"column":26},"action":"insert","lines":["t"]},{"start":{"row":2,"column":26},"end":{"row":2,"column":27},"action":"insert","lines":["a"]},{"start":{"row":2,"column":27},"end":{"row":2,"column":28},"action":"insert","lines":["h"]},{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"remove","lines":["t"],"id":84},{"start":{"row":2,"column":27},"end":{"row":2,"column":28},"action":"remove","lines":["h"]},{"start":{"row":2,"column":26},"end":{"row":2,"column":27},"action":"remove","lines":["a"]}],[{"start":{"row":2,"column":26},"end":{"row":2,"column":27},"action":"insert","lines":["h"],"id":85},{"start":{"row":2,"column":27},"end":{"row":2,"column":28},"action":"insert","lines":["a"]},{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":29},"end":{"row":2,"column":30},"action":"insert","lines":[" "],"id":86}],[{"start":{"row":2,"column":30},"end":{"row":2,"column":31},"action":"insert","lines":["w"],"id":87},{"start":{"row":2,"column":31},"end":{"row":2,"column":32},"action":"insert","lines":["i"]},{"start":{"row":2,"column":32},"end":{"row":2,"column":33},"action":"insert","lines":["l"]},{"start":{"row":2,"column":33},"end":{"row":2,"column":34},"action":"insert","lines":["l"]}],[{"start":{"row":2,"column":34},"end":{"row":2,"column":35},"action":"insert","lines":[" "],"id":88},{"start":{"row":2,"column":35},"end":{"row":2,"column":36},"action":"insert","lines":["h"]},{"start":{"row":2,"column":36},"end":{"row":2,"column":37},"action":"insert","lines":["o"]},{"start":{"row":2,"column":37},"end":{"row":2,"column":38},"action":"insert","lines":["l"]},{"start":{"row":2,"column":38},"end":{"row":2,"column":39},"action":"insert","lines":["d"]}],[{"start":{"row":2,"column":39},"end":{"row":2,"column":40},"action":"insert","lines":[" "],"id":89},{"start":{"row":2,"column":40},"end":{"row":2,"column":41},"action":"insert","lines":["o"]},{"start":{"row":2,"column":41},"end":{"row":2,"column":42},"action":"insert","lines":["f"]}],[{"start":{"row":2,"column":41},"end":{"row":2,"column":42},"action":"remove","lines":["f"],"id":90},{"start":{"row":2,"column":40},"end":{"row":2,"column":41},"action":"remove","lines":["o"]}],[{"start":{"row":2,"column":40},"end":{"row":2,"column":41},"action":"insert","lines":["a"],"id":91},{"start":{"row":2,"column":41},"end":{"row":2,"column":42},"action":"insert","lines":["l"]},{"start":{"row":2,"column":42},"end":{"row":2,"column":43},"action":"insert","lines":["l"]}],[{"start":{"row":2,"column":43},"end":{"row":2,"column":44},"action":"insert","lines":[" "],"id":92},{"start":{"row":2,"column":44},"end":{"row":2,"column":45},"action":"insert","lines":["o"]},{"start":{"row":2,"column":45},"end":{"row":2,"column":46},"action":"insert","lines":["f"]}],[{"start":{"row":2,"column":46},"end":{"row":2,"column":47},"action":"insert","lines":[" "],"id":93},{"start":{"row":2,"column":47},"end":{"row":2,"column":48},"action":"insert","lines":["t"]},{"start":{"row":2,"column":48},"end":{"row":2,"column":49},"action":"insert","lines":["h"]},{"start":{"row":2,"column":49},"end":{"row":2,"column":50},"action":"insert","lines":["e"]}],[{"start":{"row":2,"column":50},"end":{"row":2,"column":51},"action":"insert","lines":[" "],"id":94},{"start":{"row":2,"column":51},"end":{"row":2,"column":52},"action":"insert","lines":["t"]},{"start":{"row":2,"column":52},"end":{"row":2,"column":53},"action":"insert","lines":["i"]},{"start":{"row":2,"column":53},"end":{"row":2,"column":54},"action":"insert","lines":["l"]},{"start":{"row":2,"column":54},"end":{"row":2,"column":55},"action":"insert","lines":["e"]},{"start":{"row":2,"column":55},"end":{"row":2,"column":56},"action":"insert","lines":["s"]}],[{"start":{"row":2,"column":56},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":95},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":3,"column":4},"end":{"row":3,"column":5},"action":"insert","lines":["f"],"id":96},{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"insert","lines":["o"]},{"start":{"row":3,"column":6},"end":{"row":3,"column":7},"action":"insert","lines":["r"]}],[{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"insert","lines":[" "],"id":97},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"insert","lines":["a"]}],[{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"insert","lines":[" "],"id":98},{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["b"]},{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["o"]},{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"insert","lines":["g"]},{"start":{"row":3,"column":13},"end":{"row":3,"column":14},"action":"insert","lines":["g"]},{"start":{"row":3,"column":14},"end":{"row":3,"column":15},"action":"insert","lines":["l"]},{"start":{"row":3,"column":15},"end":{"row":3,"column":16},"action":"insert","lines":["e"]}],[{"start":{"row":3,"column":16},"end":{"row":3,"column":17},"action":"insert","lines":[" "],"id":99},{"start":{"row":3,"column":17},"end":{"row":3,"column":18},"action":"insert","lines":["g"]},{"start":{"row":3,"column":18},"end":{"row":3,"column":19},"action":"insert","lines":["a"]},{"start":{"row":3,"column":19},"end":{"row":3,"column":20},"action":"insert","lines":["m"]},{"start":{"row":3,"column":20},"end":{"row":3,"column":21},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":100},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]},{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["","","","",""],"id":101},{"start":{"row":2,"column":4},"end":{"row":2,"column":7},"action":"remove","lines":["Cre"]},{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":["m"]},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"remove","lines":["t"]},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["k"]},{"start":{"row":2,"column":18},"end":{"row":3,"column":10},"action":"remove","lines":["grid that will hold all of the tiles","    for a "]},{"start":{"row":2,"column":26},"end":{"row":2,"column":29},"action":"remove","lines":["ame"]},{"start":{"row":2,"column":26},"end":{"row":2,"column":29},"action":"insert","lines":["rid"]},{"start":{"row":4,"column":24},"end":{"row":5,"column":7},"action":"remove","lines":["choice(ascii_uppercase)","       "]},{"start":{"row":4,"column":24},"end":{"row":4,"column":26},"action":"insert","lines":["\"\""]}],[{"start":{"row":4,"column":26},"end":{"row":4,"column":27},"action":"remove","lines":[" "],"id":102},{"start":{"row":4,"column":25},"end":{"row":4,"column":26},"action":"remove","lines":["\""]},{"start":{"row":4,"column":24},"end":{"row":4,"column":25},"action":"remove","lines":["\""]}],[{"start":{"row":4,"column":24},"end":{"row":4,"column":25},"action":"insert","lines":["c"],"id":103},{"start":{"row":4,"column":25},"end":{"row":4,"column":26},"action":"insert","lines":["h"]},{"start":{"row":4,"column":26},"end":{"row":4,"column":27},"action":"insert","lines":["o"]},{"start":{"row":4,"column":27},"end":{"row":4,"column":28},"action":"insert","lines":["i"]},{"start":{"row":4,"column":28},"end":{"row":4,"column":29},"action":"insert","lines":["c"]}],[{"start":{"row":4,"column":29},"end":{"row":4,"column":30},"action":"insert","lines":["e"],"id":104}],[{"start":{"row":4,"column":30},"end":{"row":4,"column":31},"action":"insert","lines":[" "],"id":105}],[{"start":{"row":4,"column":30},"end":{"row":4,"column":31},"action":"remove","lines":[" "],"id":106}],[{"start":{"row":4,"column":30},"end":{"row":4,"column":31},"action":"insert","lines":["("],"id":107},{"start":{"row":4,"column":31},"end":{"row":4,"column":32},"action":"insert","lines":["a"]},{"start":{"row":4,"column":32},"end":{"row":4,"column":33},"action":"insert","lines":["s"]}],[{"start":{"row":4,"column":31},"end":{"row":4,"column":33},"action":"remove","lines":["as"],"id":108},{"start":{"row":4,"column":31},"end":{"row":4,"column":38},"action":"insert","lines":["ascii()"]}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":38},"action":"remove","lines":["()"],"id":109}],[{"start":{"row":4,"column":36},"end":{"row":4,"column":37},"action":"insert","lines":["_"],"id":110},{"start":{"row":4,"column":37},"end":{"row":4,"column":38},"action":"insert","lines":["u"]},{"start":{"row":4,"column":38},"end":{"row":4,"column":39},"action":"insert","lines":["p"]},{"start":{"row":4,"column":39},"end":{"row":4,"column":40},"action":"insert","lines":["p"]}],[{"start":{"row":4,"column":40},"end":{"row":4,"column":41},"action":"insert","lines":["e"],"id":111},{"start":{"row":4,"column":41},"end":{"row":4,"column":42},"action":"insert","lines":["r"]},{"start":{"row":4,"column":42},"end":{"row":4,"column":43},"action":"insert","lines":["c"]},{"start":{"row":4,"column":43},"end":{"row":4,"column":44},"action":"insert","lines":["a"]},{"start":{"row":4,"column":44},"end":{"row":4,"column":45},"action":"insert","lines":["s"]},{"start":{"row":4,"column":45},"end":{"row":4,"column":46},"action":"insert","lines":["e"]}],[{"start":{"row":4,"column":46},"end":{"row":4,"column":47},"action":"insert","lines":["("],"id":112}],[{"start":{"row":4,"column":46},"end":{"row":4,"column":47},"action":"remove","lines":["("],"id":113}],[{"start":{"row":4,"column":46},"end":{"row":4,"column":47},"action":"insert","lines":[")"],"id":114}],[{"start":{"row":4,"column":47},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":115},{"start":{"row":5,"column":0},"end":{"row":5,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":5,"column":4},"end":{"row":5,"column":8},"action":"insert","lines":["    "],"id":116}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":117},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]},{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["i"],"id":118},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["m"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["p"]}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["o"],"id":119},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["r"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":[" "],"id":120},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["s"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["t"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["e"],"id":121}],[{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["r"],"id":122},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["i"]},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["n"]},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["g"]}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":[" "],"id":123}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"remove","lines":[" "],"id":124},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"remove","lines":["g"]},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"remove","lines":["n"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"remove","lines":["i"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["r"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["t"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"remove","lines":["s"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"remove","lines":[" "]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"remove","lines":["t"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"remove","lines":["r"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":["o"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["p"]},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["m"]},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["i"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["f"],"id":125},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["r"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["o"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":[" "],"id":126},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["s"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["t"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["r"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["i"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["n"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["g"]}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":[" "],"id":127},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["i"]},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["m"]},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["p"]},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["o"]},{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["r"]}],[{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["t"],"id":128}],[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":[" "],"id":129}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["a"],"id":130},{"start":{"row":0,"column":20},"end":{"row":0,"column":21},"action":"insert","lines":["s"]}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":21},"action":"remove","lines":["as"],"id":131},{"start":{"row":0,"column":19},"end":{"row":0,"column":34},"action":"insert","lines":["ascii_uppercase"]}],[{"start":{"row":0,"column":34},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":132}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"insert","lines":["f"],"id":133},{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":["r"]},{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"insert","lines":["o"]},{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":[" "],"id":134},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["r"]},{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["a"]},{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["n"]},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["f"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["o"]},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["m"]}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":[" "],"id":135}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"remove","lines":[" "],"id":136},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"remove","lines":["m"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"remove","lines":["o"]},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"remove","lines":["f"]}],[{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["d"],"id":137},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["o"]},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":[","]}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"remove","lines":[","],"id":138}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":[","],"id":139}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"remove","lines":[","],"id":140}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["m"],"id":141}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":[" "],"id":142},{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":["i"]},{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"insert","lines":["m"]},{"start":{"row":1,"column":14},"end":{"row":1,"column":15},"action":"insert","lines":["p"]},{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"insert","lines":["o"]},{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"insert","lines":["r"]},{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"insert","lines":["t"]}],[{"start":{"row":1,"column":18},"end":{"row":1,"column":19},"action":"insert","lines":[" "],"id":143},{"start":{"row":1,"column":19},"end":{"row":1,"column":20},"action":"insert","lines":["c"]},{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"insert","lines":["h"]},{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"insert","lines":["o"]},{"start":{"row":1,"column":22},"end":{"row":1,"column":23},"action":"insert","lines":["i"]},{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"insert","lines":["c"]}],[{"start":{"row":1,"column":24},"end":{"row":1,"column":25},"action":"insert","lines":["e"],"id":144}],[{"start":{"row":0,"column":0},"end":{"row":11,"column":32},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","","def make_grid(width, height):","    \"\"\"","    make an empty boggle grid","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}"],"id":145},{"start":{"row":0,"column":0},"end":{"row":108,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":108,"column":10},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":146},{"start":{"row":0,"column":0},"end":{"row":108,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":108,"column":10},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":147},{"start":{"row":0,"column":0},"end":{"row":119,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","    full_words, stems = dictionary","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in full_words:","            paths.append(path)","        if word not in stems:","            return","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    full_words, stems = set(), set()","    with open(dictionary_file) as f:","        for word in f:","            word = word.strip().upper()","            full_words.add(word)","","            for i in range(1, len(word)):","                stems.add(word[:i])","","        return full_words, stems","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(4, 4)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":103,"column":4},"end":{"row":103,"column":8},"action":"remove","lines":["    "],"id":148}],[{"start":{"row":88,"column":0},"end":{"row":89,"column":0},"action":"remove","lines":["",""],"id":149}]]},"ace":{"folds":[],"scrolltop":945.3333129882812,"scrollleft":0,"selection":{"start":{"row":81,"column":25},"end":{"row":81,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":63,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1571432305998,"hash":"9541826249a0fe680232fe7b23adad554adaa733"}